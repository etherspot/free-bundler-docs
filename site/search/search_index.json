{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EntryPoint v0.8 UserOps Developer Guide","text":"<p>Welcome to the comprehensive developer guide for working with EntryPoint v0.8 and UserOperations (UserOps). This documentation provides everything you need to understand, implement, and submit UserOps using the latest EntryPoint contract.</p>"},{"location":"#what-is-entrypoint-v08","title":"\ud83d\ude80 What is EntryPoint v0.8?","text":"<p>EntryPoint v0.8 is the latest version of the core contract in the ERC-4337 Account Abstraction ecosystem. It serves as the central hub for processing UserOperations, enabling:</p> <ul> <li>Account Abstraction: Smart contract wallets with custom validation logic</li> <li>Gasless Transactions: Sponsored transactions through paymasters</li> <li>Batch Operations: Multiple operations in a single transaction</li> <li>Enhanced Security: Improved validation and anti-DoS mechanisms</li> </ul>"},{"location":"#key-features","title":"\ud83c\udfaf Key Features","text":"<p>New in v0.8</p> <ul> <li>EIP-7702 Support: Native support for EIP-7702 authorizations</li> <li>Enhanced Security: Improved validation mechanisms</li> <li>Better Gas Optimization: More efficient gas usage patterns</li> <li>Improved Error Handling: Better error reporting and debugging</li> </ul>"},{"location":"#quick-navigation","title":"\ud83d\udcda Quick Navigation","text":""},{"location":"#for-new-developers","title":"For New Developers","text":"<ul> <li>Quick Start Guide - Get up and running in 5 minutes</li> <li>Understanding UserOps - Learn the fundamentals</li> <li>Basic Examples - Your first UserOp implementation</li> </ul>"},{"location":"#for-experienced-developers","title":"For Experienced Developers","text":"<ul> <li>EntryPoint v0.8 API Reference - Complete API documentation</li> <li>Advanced Patterns - Complex use cases and patterns</li> <li>Security Considerations - Best practices and security guidelines</li> </ul>"},{"location":"#what-youll-learn","title":"\ud83d\udee0\ufe0f What You'll Learn","text":"<p>This guide covers:</p> <ol> <li>UserOperations Structure - Understanding the components of a UserOp</li> <li>Construction &amp; Validation - Building and validating UserOps correctly</li> <li>Submission Process - How to submit UserOps to EntryPoint v0.8</li> <li>Monitoring &amp; Tracking - Tracking UserOp status and events</li> <li>Error Handling - Common issues and troubleshooting</li> <li>Best Practices - Security and optimization guidelines</li> </ol>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<pre><code>graph TB\n    A[User] --&gt; B[UserOp Construction]\n    B --&gt; C[Signing]\n    C --&gt; D[Bundler]\n    D --&gt; E[EntryPoint v0.8]\n    E --&gt; F[Account Contract]\n    E --&gt; G[Paymaster]\n    F --&gt; H[Execution]\n    G --&gt; H\n    H --&gt; I[Result]\n</code></pre>"},{"location":"#getting-started","title":"\ud83d\udea6 Getting Started","text":"<p>Ready to dive in? Start with our Quick Start Guide to create your first UserOp in under 5 minutes.</p> <p>Prerequisites</p> <ul> <li>Basic understanding of Ethereum and smart contracts</li> <li>Familiarity with JavaScript/TypeScript or your preferred language</li> <li>Access to an Ethereum node (mainnet, testnet, or local)</li> </ul>"},{"location":"#documentation-structure","title":"\ud83d\udcd6 Documentation Structure","text":"<ul> <li>Getting Started - Installation, configuration, and first steps</li> <li>UserOps Guide - Deep dive into UserOperations</li> <li>EntryPoint v0.8 - Contract reference and API documentation</li> <li>Examples &amp; Tutorials - Practical code examples</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Found an issue or want to contribute? This documentation is open source and community-driven. Check out our contribution guidelines to get started.</p>"},{"location":"#support","title":"\ud83d\udcde Support","text":"<p>Need help? Check out our: - FAQ - Frequently asked questions - Common Issues - Solutions to common problems - Community Discord - Join our developer community</p> <p>Last updated: September 19, 2025</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>Common questions and answers about EntryPoint v0.8 and UserOperations.</p>"},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-entrypoint-v08","title":"What is EntryPoint v0.8?","text":"<p>EntryPoint v0.8 is the latest version of the core contract in the ERC-4337 Account Abstraction ecosystem. It processes UserOperations and enables smart contract wallets with custom validation logic.</p>"},{"location":"faq/#how-is-v08-different-from-v06","title":"How is v0.8 different from v0.6?","text":"<p>Key improvements in v0.8 include: - EIP-7702 Support: Native support for EIP-7702 authorizations - Enhanced Security: Improved validation mechanisms - Better Gas Optimization: More efficient gas usage - Improved Error Handling: Better error reporting</p>"},{"location":"faq/#what-are-useroperations","title":"What are UserOperations?","text":"<p>UserOperations (UserOps) are structures that describe transactions to be executed by account contracts. They enable: - Account abstraction - Gasless transactions - Batch operations - Custom validation logic</p>"},{"location":"faq/#technical-questions","title":"Technical Questions","text":""},{"location":"faq/#how-do-i-create-a-userop","title":"How do I create a UserOp?","text":"<pre><code>const userOp: UserOperation = {\n  sender: accountAddress,\n  nonce: currentNonce,\n  initCode: '0x',\n  callData: encodedCallData,\n  callGasLimit: 100000n,\n  verificationGasLimit: 100000n,\n  preVerificationGas: 21000n,\n  maxFeePerGas: parseUnits('20', 'gwei'),\n  maxPriorityFeePerGas: parseUnits('2', 'gwei'),\n  paymasterAndData: '0x',\n  signature: '0x'\n};\n</code></pre>"},{"location":"faq/#how-do-i-sign-a-userop","title":"How do I sign a UserOp?","text":"<ol> <li>Get the UserOp hash from EntryPoint</li> <li>Sign the hash with your private key</li> <li>Include the signature in the UserOp</li> </ol> <pre><code>const userOpHash = await entryPoint.getUserOpHash(userOp);\nconst signature = await signer.signMessage(ethers.getBytes(userOpHash));\n</code></pre>"},{"location":"faq/#what-gas-limits-should-i-use","title":"What gas limits should I use?","text":"<ul> <li>callGasLimit: Estimate based on your operation</li> <li>verificationGasLimit: Usually 100,000-200,000</li> <li>preVerificationGas: Usually 21,000 (base transaction cost)</li> </ul>"},{"location":"faq/#how-do-i-estimate-gas","title":"How do I estimate gas?","text":"<pre><code>// Estimate call gas\nconst callGasEstimate = await entryPoint.estimateGas.call(userOp);\n\n// Add buffer for safety\nconst callGasLimit = callGasEstimate * 120n / 100n;\n</code></pre>"},{"location":"faq/#bundler-questions","title":"Bundler Questions","text":""},{"location":"faq/#what-is-a-bundler","title":"What is a bundler?","text":"<p>A bundler is a service that: - Receives UserOps from clients - Validates UserOps - Submits them to EntryPoint - Handles gas payments</p>"},{"location":"faq/#how-do-i-submit-a-userop-to-a-bundler","title":"How do I submit a UserOp to a bundler?","text":"<pre><code>const response = await fetch('https://api.stackup.sh/v1/bundler', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    id: 1,\n    method: 'eth_sendUserOperation',\n    params: [userOp, entryPointAddress]\n  })\n});\n</code></pre>"},{"location":"faq/#which-bundlers-support-v08","title":"Which bundlers support v0.8?","text":"<p>Popular bundlers supporting v0.8: - Stackup: <code>https://api.stackup.sh/v1/bundler</code> - Pimlico: <code>https://api.pimlico.io/v2/sepolia/rpc</code> - Etherspot: <code>https://api.etherspot.io/v1/bundler</code></p>"},{"location":"faq/#paymaster-questions","title":"Paymaster Questions","text":""},{"location":"faq/#what-is-a-paymaster","title":"What is a paymaster?","text":"<p>A paymaster is a contract that can sponsor UserOps by paying for gas fees, enabling gasless transactions.</p>"},{"location":"faq/#how-do-i-use-a-paymaster","title":"How do I use a paymaster?","text":"<pre><code>const userOp: UserOperation = {\n  // ... other fields\n  paymasterAndData: encodePaymasterData(paymasterAddress, paymasterData)\n};\n</code></pre>"},{"location":"faq/#can-i-create-my-own-paymaster","title":"Can I create my own paymaster?","text":"<p>Yes! Paymasters are smart contracts that implement the IPaymaster interface. They can have custom sponsorship logic.</p>"},{"location":"faq/#error-handling","title":"Error Handling","text":""},{"location":"faq/#common-userop-errors","title":"Common UserOp errors","text":"<ul> <li>\"Invalid signature\": Check your signature calculation</li> <li>\"Insufficient funds\": Ensure account has enough ETH</li> <li>\"Gas limit exceeded\": Increase gas limits</li> <li>\"Nonce too low\": Use correct nonce value</li> </ul>"},{"location":"faq/#how-do-i-debug-userop-failures","title":"How do I debug UserOp failures?","text":"<ol> <li>Check the UserOp hash</li> <li>Verify signature calculation</li> <li>Ensure sufficient gas limits</li> <li>Check account balance</li> <li>Monitor EntryPoint events</li> </ol>"},{"location":"faq/#security-questions","title":"Security Questions","text":""},{"location":"faq/#is-entrypoint-v08-secure","title":"Is EntryPoint v0.8 secure?","text":"<p>Yes, EntryPoint v0.8 has been audited and includes: - Enhanced validation mechanisms - Anti-DoS protection - Gas limit enforcement - Signature verification</p>"},{"location":"faq/#how-do-i-protect-against-replay-attacks","title":"How do I protect against replay attacks?","text":"<p>UserOps include a nonce field that prevents replay attacks. Each UserOp must have a unique, sequential nonce.</p>"},{"location":"faq/#can-userops-be-front-run","title":"Can UserOps be front-run?","text":"<p>UserOps can be front-run, but this is generally not profitable due to gas costs and validation requirements.</p>"},{"location":"faq/#integration-questions","title":"Integration Questions","text":""},{"location":"faq/#which-wallets-support-entrypoint-v08","title":"Which wallets support EntryPoint v0.8?","text":"<p>Popular wallets supporting v0.8: - Safe: Smart contract wallet - Argent: Mobile wallet - Braavos: StarkNet wallet - Custom wallets: Any ERC-4337 compatible wallet</p>"},{"location":"faq/#how-do-i-integrate-with-existing-dapps","title":"How do I integrate with existing dApps?","text":"<p>Most dApps can integrate with EntryPoint v0.8 by: 1. Detecting account abstraction support 2. Using UserOps instead of regular transactions 3. Handling gas sponsorship through paymasters</p>"},{"location":"faq/#performance-questions","title":"Performance Questions","text":""},{"location":"faq/#how-fast-are-userops","title":"How fast are UserOps?","text":"<p>UserOp processing speed depends on: - Network congestion - Gas price settings - Bundler performance - EntryPoint validation time</p>"},{"location":"faq/#can-i-batch-multiple-operations","title":"Can I batch multiple operations?","text":"<p>Yes! You can batch multiple operations in a single UserOp or submit multiple UserOps to be processed together.</p>"},{"location":"faq/#how-much-gas-do-userops-use","title":"How much gas do UserOps use?","text":"<p>Gas usage varies by operation: - Simple transfer: ~21,000 gas - Contract interaction: 50,000-200,000 gas - Complex operations: 200,000+ gas</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#my-userop-is-stuck","title":"My UserOp is stuck","text":"<ol> <li>Check if it was submitted to a bundler</li> <li>Monitor EntryPoint events</li> <li>Verify gas limits are sufficient</li> <li>Check network status</li> </ol>"},{"location":"faq/#im-getting-validation-errors","title":"I'm getting validation errors","text":"<ol> <li>Verify your signature calculation</li> <li>Check nonce values</li> <li>Ensure account exists</li> <li>Validate gas limits</li> </ol>"},{"location":"faq/#gas-estimation-is-wrong","title":"Gas estimation is wrong","text":"<ol> <li>Test on testnets first</li> <li>Add buffer to estimates</li> <li>Monitor gas prices</li> <li>Use dynamic gas estimation</li> </ol>"},{"location":"faq/#getting-help","title":"Getting Help","text":""},{"location":"faq/#where-can-i-get-support","title":"Where can I get support?","text":"<ul> <li>Documentation: This guide and linked resources</li> <li>Community: Discord, Telegram, or GitHub discussions</li> <li>Stack Overflow: Tag questions with <code>erc-4337</code> or <code>account-abstraction</code></li> </ul>"},{"location":"faq/#how-do-i-report-bugs","title":"How do I report bugs?","text":"<p>Report bugs through: - GitHub issues in relevant repositories - Community channels - Direct contact with maintainers</p> <p>Still have questions? Check out our Troubleshooting Guide or join our community Discord.</p>"},{"location":"entrypoint/overview/","title":"EntryPoint v0.8 Overview","text":"<p>EntryPoint v0.8 is the latest version of the core contract in the ERC-4337 Account Abstraction ecosystem. This guide provides a comprehensive overview of its features, improvements, and how it processes UserOperations.</p>"},{"location":"entrypoint/overview/#what-is-entrypoint-v08","title":"What is EntryPoint v0.8?","text":"<p>EntryPoint v0.8 is a smart contract that serves as the central hub for processing UserOperations in the Account Abstraction ecosystem. It's responsible for:</p> <ul> <li>Validation: Verifying UserOp signatures and parameters</li> <li>Execution: Executing operations on account contracts</li> <li>Gas Management: Handling gas payments and refunds</li> <li>Event Emission: Providing tracking and monitoring capabilities</li> </ul>"},{"location":"entrypoint/overview/#key-improvements-in-v08","title":"Key Improvements in v0.8","text":""},{"location":"entrypoint/overview/#eip-7702-support","title":"EIP-7702 Support","text":"<p>EntryPoint v0.8 introduces native support for EIP-7702 authorizations, enabling: - Delegated Authorization: Accounts can delegate execution to other contracts - Enhanced Security: More flexible authorization patterns - Gas Optimization: Reduced gas costs for certain operations</p>"},{"location":"entrypoint/overview/#enhanced-security","title":"Enhanced Security","text":"<ul> <li>Improved Validation: Better signature verification mechanisms</li> <li>Anti-DoS Protection: Enhanced protection against denial-of-service attacks</li> <li>Gas Limit Enforcement: Stricter gas limit validation</li> </ul>"},{"location":"entrypoint/overview/#better-gas-optimization","title":"Better Gas Optimization","text":"<ul> <li>Reduced Overhead: Lower gas costs for common operations</li> <li>Batch Processing: More efficient handling of multiple UserOps</li> <li>Smart Refunds: Improved gas refund mechanisms</li> </ul>"},{"location":"entrypoint/overview/#contract-addresses","title":"Contract Addresses","text":""},{"location":"entrypoint/overview/#mainnet","title":"Mainnet","text":"<pre><code>EntryPoint v0.8: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\n</code></pre>"},{"location":"entrypoint/overview/#testnets","title":"Testnets","text":"<pre><code>Sepolia: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\nGoerli: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\n</code></pre>"},{"location":"entrypoint/overview/#core-functions","title":"Core Functions","text":""},{"location":"entrypoint/overview/#handleops","title":"handleOps()","text":"<p>The main function for processing UserOperations:</p> <pre><code>function handleOps(\n    UserOperation[] calldata ops,\n    address payable beneficiary\n) external;\n</code></pre> <p>Parameters: - <code>ops</code>: Array of UserOperations to process - <code>beneficiary</code>: Address to receive gas refunds</p> <p>Behavior: - Validates each UserOp - Executes operations on account contracts - Handles gas payments and refunds - Emits events for tracking</p>"},{"location":"entrypoint/overview/#simulatevalidation","title":"simulateValidation()","text":"<p>Simulates UserOp validation without execution:</p> <pre><code>function simulateValidation(UserOperation calldata userOp) external;\n</code></pre> <p>Purpose: - Test UserOp validity before submission - Estimate gas costs - Debug validation issues</p>"},{"location":"entrypoint/overview/#getuserophash","title":"getUserOpHash()","text":"<p>Calculates the hash of a UserOp for signing:</p> <pre><code>function getUserOpHash(UserOperation calldata userOp) \n    public view returns (bytes32);\n</code></pre> <p>Returns: - <code>bytes32</code>: Hash to be signed by the user</p>"},{"location":"entrypoint/overview/#userop-processing-flow","title":"UserOp Processing Flow","text":"<pre><code>graph TD\n    A[UserOp Received] --&gt; B[Pre-validation]\n    B --&gt; C{Valid?}\n    C --&gt;|No| D[Reject]\n    C --&gt;|Yes| E[Account Validation]\n    E --&gt; F{Signature Valid?}\n    F --&gt;|No| D\n    F --&gt;|Yes| G[Execute Operation]\n    G --&gt; H[Handle Gas]\n    H --&gt; I[Emit Events]\n    I --&gt; J[Success]\n</code></pre>"},{"location":"entrypoint/overview/#validation-process","title":"Validation Process","text":""},{"location":"entrypoint/overview/#1-pre-validation","title":"1. Pre-validation","text":"<ul> <li>Check nonce uniqueness</li> <li>Validate gas limits</li> <li>Verify paymaster data (if present)</li> <li>Check account existence</li> </ul>"},{"location":"entrypoint/overview/#2-account-validation","title":"2. Account Validation","text":"<ul> <li>Verify signature</li> <li>Execute custom validation logic</li> <li>Check account permissions</li> <li>Validate paymaster sponsorship</li> </ul>"},{"location":"entrypoint/overview/#3-execution","title":"3. Execution","text":"<ul> <li>Execute the operation</li> <li>Handle gas payments</li> <li>Process refunds</li> <li>Emit tracking events</li> </ul>"},{"location":"entrypoint/overview/#gas-management","title":"Gas Management","text":""},{"location":"entrypoint/overview/#gas-limits","title":"Gas Limits","text":"<p>EntryPoint v0.8 enforces several gas limits:</p> <ul> <li>callGasLimit: Maximum gas for operation execution</li> <li>verificationGasLimit: Maximum gas for validation</li> <li>preVerificationGas: Gas for pre-verification steps</li> </ul>"},{"location":"entrypoint/overview/#gas-refunds","title":"Gas Refunds","text":"<ul> <li>Account Refunds: Accounts can receive gas refunds</li> <li>Paymaster Refunds: Paymasters can sponsor operations</li> <li>Beneficiary Refunds: Excess gas goes to beneficiary</li> </ul>"},{"location":"entrypoint/overview/#event-system","title":"Event System","text":""},{"location":"entrypoint/overview/#useroperationevent","title":"UserOperationEvent","text":"<p>Emitted when a UserOp is processed:</p> <pre><code>event UserOperationEvent(\n    bytes32 indexed userOpHash,\n    address indexed sender,\n    address indexed paymaster,\n    uint256 nonce,\n    bool success,\n    uint256 actualGasCost,\n    uint256 actualGasUsed\n);\n</code></pre>"},{"location":"entrypoint/overview/#useroperationrevertreason","title":"UserOperationRevertReason","text":"<p>Emitted when a UserOp fails:</p> <pre><code>event UserOperationRevertReason(\n    bytes32 indexed userOpHash,\n    address indexed sender,\n    uint256 nonce,\n    bytes revertReason\n);\n</code></pre>"},{"location":"entrypoint/overview/#security-considerations","title":"Security Considerations","text":""},{"location":"entrypoint/overview/#signature-validation","title":"Signature Validation","text":"<ul> <li>ECDSA Verification: Standard ECDSA signature validation</li> <li>Custom Validation: Support for custom validation logic</li> <li>Replay Protection: Nonce-based replay protection</li> </ul>"},{"location":"entrypoint/overview/#gas-protection","title":"Gas Protection","text":"<ul> <li>Gas Limit Enforcement: Strict gas limit validation</li> <li>Anti-DoS: Protection against denial-of-service attacks</li> <li>Refund Limits: Limits on gas refunds</li> </ul>"},{"location":"entrypoint/overview/#access-control","title":"Access Control","text":"<ul> <li>Bundler Access: Only authorized bundlers can submit UserOps</li> <li>Paymaster Access: Controlled paymaster integration</li> <li>Admin Functions: Restricted admin functions</li> </ul>"},{"location":"entrypoint/overview/#integration-with-bundlers","title":"Integration with Bundlers","text":""},{"location":"entrypoint/overview/#bundler-requirements","title":"Bundler Requirements","text":"<ul> <li>Authorization: Must be authorized to submit UserOps</li> <li>Gas Management: Must handle gas payments correctly</li> <li>Event Monitoring: Should monitor UserOp events</li> </ul>"},{"location":"entrypoint/overview/#submission-process","title":"Submission Process","text":"<ol> <li>Bundler receives UserOp from client</li> <li>Bundler validates UserOp locally</li> <li>Bundler submits to EntryPoint</li> <li>EntryPoint processes and executes</li> <li>Bundler monitors for completion</li> </ol>"},{"location":"entrypoint/overview/#best-practices","title":"Best Practices","text":""},{"location":"entrypoint/overview/#for-developers","title":"For Developers","text":"<ul> <li>Gas Estimation: Always estimate gas limits accurately</li> <li>Error Handling: Implement proper error handling</li> <li>Event Monitoring: Monitor UserOp events for status</li> </ul>"},{"location":"entrypoint/overview/#for-bundlers","title":"For Bundlers","text":"<ul> <li>Validation: Validate UserOps before submission</li> <li>Gas Management: Handle gas payments correctly</li> <li>Monitoring: Monitor EntryPoint events</li> </ul>"},{"location":"entrypoint/overview/#migration-from-v06","title":"Migration from v0.6","text":""},{"location":"entrypoint/overview/#key-changes","title":"Key Changes","text":"<ul> <li>EIP-7702 Support: New authorization patterns</li> <li>Enhanced Security: Improved validation mechanisms</li> <li>Gas Optimization: Better gas efficiency</li> <li>Event Changes: Updated event structure</li> </ul>"},{"location":"entrypoint/overview/#migration-steps","title":"Migration Steps","text":"<ol> <li>Update contract addresses</li> <li>Update gas estimation logic</li> <li>Update event handling</li> <li>Test thoroughly on testnets</li> </ol>"},{"location":"entrypoint/overview/#next-steps","title":"Next Steps","text":"<p>Explore the complete EntryPoint v0.8 functionality:</p> <ol> <li>API Reference - Complete function reference</li> <li>Security Considerations - Security best practices</li> <li>Examples - Practical implementation examples</li> </ol> <p>Ready to dive deeper? Check out our API Reference for complete function documentation.</p>"},{"location":"examples/basic-userop/","title":"Basic UserOp Examples","text":"<p>This guide provides practical examples of creating and submitting UserOperations with EntryPoint v0.8.</p>"},{"location":"examples/basic-userop/#simple-eth-transfer","title":"Simple ETH Transfer","text":"<p>The most basic UserOp - transferring ETH from one account to another.</p> <pre><code>import { ethers } from 'ethers';\nimport { UserOperation } from '@account-abstraction/sdk';\n\nasync function createTransferUserOp(\n  sender: string,\n  recipient: string,\n  amount: string,\n  nonce: bigint\n): Promise&lt;UserOperation&gt; {\n  const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);\n  const signer = new ethers.Wallet(process.env.PRIVATE_KEY!, provider);\n\n  // Encode the transfer call\n  const callData = encodeTransfer(recipient, ethers.parseEther(amount));\n\n  const userOp: UserOperation = {\n    sender,\n    nonce,\n    initCode: '0x',\n    callData,\n    callGasLimit: 21000n,\n    verificationGasLimit: 100000n,\n    preVerificationGas: 21000n,\n    maxFeePerGas: ethers.parseUnits('20', 'gwei'),\n    maxPriorityFeePerGas: ethers.parseUnits('2', 'gwei'),\n    paymasterAndData: '0x',\n    signature: '0x'\n  };\n\n  return userOp;\n}\n\nfunction encodeTransfer(recipient: string, amount: bigint): string {\n  const iface = new ethers.Interface([\n    'function execute(address,uint256,bytes)'\n  ]);\n\n  return iface.encodeFunctionData('execute', [recipient, amount, '0x']);\n}\n</code></pre>"},{"location":"examples/basic-userop/#contract-interaction","title":"Contract Interaction","text":"<p>Interacting with a smart contract through a UserOp.</p> <pre><code>async function createContractCallUserOp(\n  sender: string,\n  contractAddress: string,\n  functionName: string,\n  params: any[],\n  nonce: bigint\n): Promise&lt;UserOperation&gt; {\n  const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);\n\n  // Create contract interface\n  const contractInterface = new ethers.Interface([\n    'function transfer(address to, uint256 amount)',\n    'function approve(address spender, uint256 amount)',\n    'function mint(address to, uint256 amount)'\n  ]);\n\n  // Encode function call\n  const callData = contractInterface.encodeFunctionData(functionName, params);\n\n  const userOp: UserOperation = {\n    sender,\n    nonce,\n    initCode: '0x',\n    callData,\n    callGasLimit: 100000n,\n    verificationGasLimit: 150000n,\n    preVerificationGas: 21000n,\n    maxFeePerGas: ethers.parseUnits('25', 'gwei'),\n    maxPriorityFeePerGas: ethers.parseUnits('3', 'gwei'),\n    paymasterAndData: '0x',\n    signature: '0x'\n  };\n\n  return userOp;\n}\n\n// Example usage\nconst userOp = await createContractCallUserOp(\n  '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',\n  '0xA0b86a33E6441b8c4C8C0C8C0C8C0C8C0C8C0C8C',\n  'transfer',\n  ['0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6', ethers.parseEther('1')],\n  123n\n);\n</code></pre>"},{"location":"examples/basic-userop/#batch-operations","title":"Batch Operations","text":"<p>Executing multiple operations in a single UserOp.</p> <pre><code>async function createBatchUserOp(\n  sender: string,\n  operations: Array&lt;{\n    target: string;\n    value: bigint;\n    data: string;\n  }&gt;,\n  nonce: bigint\n): Promise&lt;UserOperation&gt; {\n  // Encode batch execution\n  const callData = encodeBatchExecution(operations);\n\n  const userOp: UserOperation = {\n    sender,\n    nonce,\n    initCode: '0x',\n    callData,\n    callGasLimit: 200000n, // Higher gas for batch\n    verificationGasLimit: 150000n,\n    preVerificationGas: 21000n,\n    maxFeePerGas: ethers.parseUnits('30', 'gwei'),\n    maxPriorityFeePerGas: ethers.parseUnits('5', 'gwei'),\n    paymasterAndData: '0x',\n    signature: '0x'\n  };\n\n  return userOp;\n}\n\nfunction encodeBatchExecution(operations: Array&lt;{\n  target: string;\n  value: bigint;\n  data: string;\n}&gt;): string {\n  const iface = new ethers.Interface([\n    'function executeBatch(tuple(address target, uint256 value, bytes data)[] ops)'\n  ]);\n\n  return iface.encodeFunctionData('executeBatch', [operations]);\n}\n\n// Example usage\nconst batchOps = [\n  {\n    target: '0xA0b86a33E6441b8c4C8C0C8C0C8C0C8C0C8C0C8C',\n    value: 0n,\n    data: '0xa9059cbb000000000000000000000000742d35cc...'\n  },\n  {\n    target: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',\n    value: ethers.parseEther('0.1'),\n    data: '0x'\n  }\n];\n\nconst batchUserOp = await createBatchUserOp(\n  '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',\n  batchOps,\n  124n\n);\n</code></pre>"},{"location":"examples/basic-userop/#paymaster-sponsored-userop","title":"Paymaster Sponsored UserOp","text":"<p>Creating a gasless UserOp using a paymaster.</p> <pre><code>async function createSponsoredUserOp(\n  sender: string,\n  target: string,\n  value: bigint,\n  data: string,\n  nonce: bigint,\n  paymasterAddress: string\n): Promise&lt;UserOperation&gt; {\n  const callData = encodeExecute(target, value, data);\n\n  const userOp: UserOperation = {\n    sender,\n    nonce,\n    initCode: '0x',\n    callData,\n    callGasLimit: 100000n,\n    verificationGasLimit: 150000n,\n    preVerificationGas: 21000n,\n    maxFeePerGas: ethers.parseUnits('20', 'gwei'),\n    maxPriorityFeePerGas: ethers.parseUnits('2', 'gwei'),\n    paymasterAndData: encodePaymasterData(paymasterAddress, '0x'),\n    signature: '0x'\n  };\n\n  return userOp;\n}\n\nfunction encodePaymasterData(paymasterAddress: string, paymasterData: string): string {\n  return paymasterAddress + paymasterData.slice(2);\n}\n\nfunction encodeExecute(target: string, value: bigint, data: string): string {\n  const iface = new ethers.Interface([\n    'function execute(address,uint256,bytes)'\n  ]);\n\n  return iface.encodeFunctionData('execute', [target, value, data]);\n}\n</code></pre>"},{"location":"examples/basic-userop/#complete-example-with-signing","title":"Complete Example with Signing","text":"<p>A complete example that creates, signs, and submits a UserOp.</p> <pre><code>import { ethers } from 'ethers';\nimport { UserOperation } from '@account-abstraction/sdk';\n\nclass UserOpManager {\n  private provider: ethers.JsonRpcProvider;\n  private signer: ethers.Wallet;\n  private entryPoint: ethers.Contract;\n\n  constructor(rpcUrl: string, privateKey: string, entryPointAddress: string) {\n    this.provider = new ethers.JsonRpcProvider(rpcUrl);\n    this.signer = new ethers.Wallet(privateKey, this.provider);\n    this.entryPoint = new ethers.Contract(\n      entryPointAddress,\n      [\n        'function getUserOpHash(tuple) view returns (bytes32)',\n        'function getNonce(address,uint192) view returns (uint256)'\n      ],\n      this.provider\n    );\n  }\n\n  async createAndSignUserOp(\n    target: string,\n    value: bigint,\n    data: string\n  ): Promise&lt;UserOperation&gt; {\n    const sender = await this.signer.getAddress();\n    const nonce = await this.getNonce(sender);\n\n    // Create UserOp\n    const userOp: UserOperation = {\n      sender,\n      nonce,\n      initCode: '0x',\n      callData: this.encodeExecute(target, value, data),\n      callGasLimit: 100000n,\n      verificationGasLimit: 100000n,\n      preVerificationGas: 21000n,\n      maxFeePerGas: ethers.parseUnits('20', 'gwei'),\n      maxPriorityFeePerGas: ethers.parseUnits('2', 'gwei'),\n      paymasterAndData: '0x',\n      signature: '0x'\n    };\n\n    // Sign UserOp\n    const userOpHash = await this.entryPoint.getUserOpHash(userOp);\n    const signature = await this.signer.signMessage(ethers.getBytes(userOpHash));\n\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  async submitUserOp(userOp: UserOperation, bundlerUrl: string): Promise&lt;string&gt; {\n    const response = await fetch(bundlerUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'eth_sendUserOperation',\n        params: [userOp, await this.entryPoint.getAddress()]\n      })\n    });\n\n    const result = await response.json();\n\n    if (result.error) {\n      throw new Error(`Bundler error: ${result.error.message}`);\n    }\n\n    return result.result;\n  }\n\n  private async getNonce(address: string): Promise&lt;bigint&gt; {\n    return await this.entryPoint.getNonce(address, 0);\n  }\n\n  private encodeExecute(target: string, value: bigint, data: string): string {\n    const iface = new ethers.Interface([\n      'function execute(address,uint256,bytes)'\n    ]);\n\n    return iface.encodeFunctionData('execute', [target, value, data]);\n  }\n}\n\n// Usage example\nasync function main() {\n  const userOpManager = new UserOpManager(\n    process.env.RPC_URL!,\n    process.env.PRIVATE_KEY!,\n    process.env.ENTRYPOINT_ADDRESS!\n  );\n\n  try {\n    // Create and sign UserOp\n    const userOp = await userOpManager.createAndSignUserOp(\n      '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',\n      ethers.parseEther('0.001'),\n      '0x'\n    );\n\n    // Submit to bundler\n    const userOpHash = await userOpManager.submitUserOp(\n      userOp,\n      'https://api.stackup.sh/v1/bundler'\n    );\n\n    console.log('UserOp submitted:', userOpHash);\n\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nmain();\n</code></pre>"},{"location":"examples/basic-userop/#error-handling","title":"Error Handling","text":"<p>Proper error handling for UserOp operations.</p> <pre><code>async function submitUserOpWithRetry(\n  userOp: UserOperation,\n  bundlerUrl: string,\n  maxRetries: number = 3\n): Promise&lt;string&gt; {\n  let lastError: Error;\n\n  for (let attempt = 1; attempt &lt;= maxRetries; attempt++) {\n    try {\n      const response = await fetch(bundlerUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method: 'eth_sendUserOperation',\n          params: [userOp, process.env.ENTRYPOINT_ADDRESS]\n        })\n      });\n\n      const result = await response.json();\n\n      if (result.error) {\n        throw new Error(`Bundler error: ${result.error.message}`);\n      }\n\n      return result.result;\n\n    } catch (error) {\n      lastError = error as Error;\n      console.warn(`Attempt ${attempt} failed:`, error);\n\n      if (attempt &lt; maxRetries) {\n        // Wait before retry\n        await new Promise(resolve =&gt; setTimeout(resolve, 1000 * attempt));\n      }\n    }\n  }\n\n  throw new Error(`Failed after ${maxRetries} attempts: ${lastError.message}`);\n}\n</code></pre>"},{"location":"examples/basic-userop/#next-steps","title":"Next Steps","text":"<p>Now that you understand basic UserOp creation:</p> <ol> <li>Advanced Patterns - Complex use cases and patterns</li> <li>Integration Examples - Real-world integration examples</li> <li>Monitoring UserOps - Track UserOp execution</li> </ol> <p>Ready for more complex examples? Check out our Advanced Patterns guide.</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will help you install and set up the necessary tools and dependencies for working with EntryPoint v0.8 and UserOperations.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing, ensure you have:</p> <ul> <li>Node.js: Version 16 or higher</li> <li>npm or yarn: Package manager</li> <li>Git: Version control</li> <li>Ethereum RPC Access: Infura, Alchemy, or local node</li> </ul>"},{"location":"getting-started/installation/#package-installation","title":"Package Installation","text":""},{"location":"getting-started/installation/#core-dependencies","title":"Core Dependencies","text":"<p>Install the essential packages for EntryPoint v0.8 development:</p> <pre><code># Using npm\nnpm install @account-abstraction/sdk ethers\n\n# Using yarn\nyarn add @account-abstraction/sdk ethers\n\n# Using pnpm\npnpm add @account-abstraction/sdk ethers\n</code></pre>"},{"location":"getting-started/installation/#additional-utilities","title":"Additional Utilities","text":"<p>For enhanced functionality, consider installing:</p> <pre><code># TypeScript support\nnpm install -D typescript @types/node\n\n# Testing framework\nnpm install -D jest @types/jest\n\n# Development tools\nnpm install -D hardhat @nomicfoundation/hardhat-toolbox\n</code></pre>"},{"location":"getting-started/installation/#environment-setup","title":"Environment Setup","text":""},{"location":"getting-started/installation/#1-create-project-structure","title":"1. Create Project Structure","text":"<pre><code>mkdir entrypoint-v8-project\ncd entrypoint-v8-project\nnpm init -y\n</code></pre>"},{"location":"getting-started/installation/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>npm install @account-abstraction/sdk ethers\n</code></pre>"},{"location":"getting-started/installation/#3-environment-configuration","title":"3. Environment Configuration","text":"<p>Create a <code>.env</code> file:</p> <pre><code># .env\nRPC_URL=https://sepolia.infura.io/v3/YOUR_PROJECT_ID\nPRIVATE_KEY=your_private_key_here\nENTRYPOINT_ADDRESS=0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\nBUNDLER_URL=https://api.stackup.sh/v1/bundler\n</code></pre>"},{"location":"getting-started/installation/#4-typescript-configuration-optional","title":"4. TypeScript Configuration (Optional)","text":"<p>Create <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"ES2020\"],\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}\n</code></pre>"},{"location":"getting-started/installation/#sdk-specific-installation","title":"SDK-Specific Installation","text":""},{"location":"getting-started/installation/#account-abstractionsdk","title":"@account-abstraction/sdk","text":"<p>The official Account Abstraction SDK:</p> <pre><code>npm install @account-abstraction/sdk\n</code></pre> <p>Features: - UserOp construction utilities - EntryPoint integration - Bundler communication - TypeScript support</p>"},{"location":"getting-started/installation/#alternative-sdks","title":"Alternative SDKs","text":""},{"location":"getting-started/installation/#useropjs","title":"userop.js","text":"<pre><code>npm install userop\n</code></pre>"},{"location":"getting-started/installation/#ethersjs-with-custom-integration","title":"ethers.js with custom integration","text":"<pre><code>npm install ethers\n</code></pre>"},{"location":"getting-started/installation/#development-environment","title":"Development Environment","text":""},{"location":"getting-started/installation/#local-development","title":"Local Development","text":"<p>For local development and testing:</p> <pre><code># Install Hardhat for local blockchain\nnpm install -D hardhat @nomicfoundation/hardhat-toolbox\n\n# Initialize Hardhat\nnpx hardhat init\n</code></pre>"},{"location":"getting-started/installation/#testnet-configuration","title":"Testnet Configuration","text":"<p>Configure for testnet development:</p> <pre><code>// hardhat.config.ts\nimport { HardhatUserConfig } from \"hardhat/config\";\nimport \"@nomicfoundation/hardhat-toolbox\";\n\nconst config: HardhatUserConfig = {\n  solidity: \"0.8.19\",\n  networks: {\n    sepolia: {\n      url: process.env.RPC_URL,\n      accounts: [process.env.PRIVATE_KEY!]\n    }\n  }\n};\n\nexport default config;\n</code></pre>"},{"location":"getting-started/installation/#bundler-setup","title":"Bundler Setup","text":""},{"location":"getting-started/installation/#using-public-bundlers","title":"Using Public Bundlers","text":"<p>No additional setup required for public bundlers:</p> <ul> <li>Stackup: <code>https://api.stackup.sh/v1/bundler</code></li> <li>Pimlico: <code>https://api.pimlico.io/v2/sepolia/rpc</code></li> <li>Etherspot: <code>https://api.etherspot.io/v1/bundler</code></li> </ul>"},{"location":"getting-started/installation/#self-hosted-bundler","title":"Self-Hosted Bundler","text":"<p>For production or custom requirements:</p> <pre><code># Clone bundler repository\ngit clone https://github.com/stackup-wallet/stackup-bundler.git\ncd stackup-bundler\n\n# Install dependencies\nnpm install\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your configuration\n\n# Start bundler\nnpm start\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#test-installation","title":"Test Installation","text":"<p>Create a simple test file to verify your setup:</p> <pre><code>// test-setup.ts\nimport { ethers } from 'ethers';\n\nasync function testSetup() {\n  try {\n    // Test provider connection\n    const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);\n    const network = await provider.getNetwork();\n    console.log('Connected to network:', network.name);\n\n    // Test EntryPoint contract\n    const entryPointAddress = process.env.ENTRYPOINT_ADDRESS;\n    const entryPoint = new ethers.Contract(\n      entryPointAddress!,\n      ['function getUserOpHash(tuple) view returns (bytes32)'],\n      provider\n    );\n\n    console.log('EntryPoint contract accessible');\n    console.log('Setup complete!');\n\n  } catch (error) {\n    console.error('Setup failed:', error);\n  }\n}\n\ntestSetup();\n</code></pre> <p>Run the test:</p> <pre><code>npx ts-node test-setup.ts\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#1-network-connection-errors","title":"1. Network Connection Errors","text":"<pre><code># Check RPC URL\ncurl -X POST -H \"Content-Type: application/json\" \\\n  --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}' \\\n  YOUR_RPC_URL\n</code></pre>"},{"location":"getting-started/installation/#2-package-installation-issues","title":"2. Package Installation Issues","text":"<pre><code># Clear cache and reinstall\nnpm cache clean --force\nrm -rf node_modules package-lock.json\nnpm install\n</code></pre>"},{"location":"getting-started/installation/#3-typescript-errors","title":"3. TypeScript Errors","text":"<pre><code># Install type definitions\nnpm install -D @types/node @types/jest\n</code></pre>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check Documentation: Review package documentation</li> <li>Community Support: Discord, GitHub discussions</li> <li>Stack Overflow: Tag with <code>erc-4337</code> or <code>account-abstraction</code></li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installation is complete:</p> <ol> <li>Quick Start Guide - Create your first UserOp</li> <li>Configuration Guide - Advanced configuration options</li> <li>Understanding UserOps - Learn UserOp fundamentals</li> </ol> <p>Installation complete? Head to our Quick Start Guide to create your first UserOp!</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with EntryPoint v0.8 and UserOperations in under 5 minutes! This guide will walk you through creating and submitting your first UserOp.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Node.js 16+ installed</li> <li>Basic understanding of Ethereum and smart contracts</li> <li>Access to an Ethereum RPC endpoint (testnet recommended)</li> </ul>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":""},{"location":"getting-started/quick-start/#1-install-required-packages","title":"1. Install Required Packages","text":"<pre><code>npm install @account-abstraction/sdk ethers\n# or\nyarn add @account-abstraction/sdk ethers\n</code></pre>"},{"location":"getting-started/quick-start/#2-set-up-your-environment","title":"2. Set Up Your Environment","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># .env\nRPC_URL=https://sepolia.infura.io/v3/YOUR_PROJECT_ID\nPRIVATE_KEY=your_private_key_here\nENTRYPOINT_ADDRESS=0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\n</code></pre>"},{"location":"getting-started/quick-start/#your-first-userop","title":"Your First UserOp","text":"<p>Let's create a simple UserOp that transfers ETH from an account to another address.</p>"},{"location":"getting-started/quick-start/#1-basic-setup","title":"1. Basic Setup","text":"<pre><code>import { ethers } from 'ethers';\nimport { UserOperation } from '@account-abstraction/sdk';\n\n// Initialize provider and signer\nconst provider = new ethers.JsonRpcProvider(process.env.RPC_URL);\nconst signer = new ethers.Wallet(process.env.PRIVATE_KEY!, provider);\n\n// EntryPoint v0.8 address (Sepolia testnet)\nconst ENTRYPOINT_ADDRESS = '0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789';\n</code></pre>"},{"location":"getting-started/quick-start/#2-create-a-userop","title":"2. Create a UserOp","text":"<pre><code>async function createUserOp() {\n  // Define the operation\n  const target = '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6'; // Recipient address\n  const value = ethers.parseEther('0.001'); // Amount to send\n  const data = '0x'; // No additional data needed for simple transfer\n\n  // Create the UserOp\n  const userOp: UserOperation = {\n    sender: await signer.getAddress(),\n    nonce: await getNonce(await signer.getAddress()),\n    initCode: '0x',\n    callData: encodeCallData(target, value, data),\n    callGasLimit: 100000,\n    verificationGasLimit: 100000,\n    preVerificationGas: 21000,\n    maxFeePerGas: ethers.parseUnits('20', 'gwei'),\n    maxPriorityFeePerGas: ethers.parseUnits('2', 'gwei'),\n    paymasterAndData: '0x',\n    signature: '0x'\n  };\n\n  return userOp;\n}\n</code></pre>"},{"location":"getting-started/quick-start/#3-sign-the-userop","title":"3. Sign the UserOp","text":"<pre><code>async function signUserOp(userOp: UserOperation): Promise&lt;UserOperation&gt; {\n  // Get the UserOp hash\n  const userOpHash = await getUserOpHash(userOp);\n\n  // Sign the hash\n  const signature = await signer.signMessage(ethers.getBytes(userOpHash));\n\n  // Return the signed UserOp\n  return {\n    ...userOp,\n    signature\n  };\n}\n</code></pre>"},{"location":"getting-started/quick-start/#4-submit-to-bundler","title":"4. Submit to Bundler","text":"<pre><code>async function submitUserOp(userOp: UserOperation) {\n  const bundlerUrl = 'https://api.stackup.sh/v1/bundler';\n\n  const response = await fetch(`${bundlerUrl}/eth_sendUserOperation`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      id: 1,\n      method: 'eth_sendUserOperation',\n      params: [userOp, ENTRYPOINT_ADDRESS]\n    })\n  });\n\n  const result = await response.json();\n\n  if (result.error) {\n    throw new Error(`Bundler error: ${result.error.message}`);\n  }\n\n  return result.result;\n}\n</code></pre>"},{"location":"getting-started/quick-start/#5-complete-example","title":"5. Complete Example","text":"<pre><code>async function main() {\n  try {\n    console.log('Creating UserOp...');\n    const userOp = await createUserOp();\n\n    console.log('Signing UserOp...');\n    const signedUserOp = await signUserOp(userOp);\n\n    console.log('Submitting to bundler...');\n    const userOpHash = await submitUserOp(signedUserOp);\n\n    console.log(`UserOp submitted! Hash: ${userOpHash}`);\n    console.log('Monitor your transaction on the blockchain...');\n\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nmain();\n</code></pre>"},{"location":"getting-started/quick-start/#helper-functions","title":"Helper Functions","text":"<p>You'll need these helper functions to complete the example:</p> <pre><code>// Get nonce for the account\nasync function getNonce(address: string): Promise&lt;bigint&gt; {\n  const entryPoint = new ethers.Contract(\n    ENTRYPOINT_ADDRESS,\n    ['function getNonce(address,uint192) view returns (uint256)'],\n    provider\n  );\n\n  return await entryPoint.getNonce(address, 0);\n}\n\n// Encode call data for the operation\nfunction encodeCallData(target: string, value: bigint, data: string): string {\n  const iface = new ethers.Interface([\n    'function execute(address,uint256,bytes)'\n  ]);\n\n  return iface.encodeFunctionData('execute', [target, value, data]);\n}\n\n// Get UserOp hash for signing\nasync function getUserOpHash(userOp: UserOperation): Promise&lt;string&gt; {\n  const entryPoint = new ethers.Contract(\n    ENTRYPOINT_ADDRESS,\n    ['function getUserOpHash(tuple) view returns (bytes32)'],\n    provider\n  );\n\n  return await entryPoint.getUserOpHash(userOp);\n}\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've successfully created and submitted your first UserOp. Here's what to explore next:</p> <ol> <li>Understanding UserOps - Learn about UserOp structure and components</li> <li>Constructing UserOps - Advanced UserOp construction techniques</li> <li>Monitoring UserOps - Track your UserOp status</li> <li>Basic Examples - More practical examples</li> </ol>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ul> <li>\"Invalid signature\": Ensure you're signing the correct UserOp hash</li> <li>\"Insufficient funds\": Check your account balance and gas settings</li> <li>\"Bundler error\": Verify your RPC endpoint and bundler URL</li> </ul> <p>For more help, check our Troubleshooting Guide.</p> <p>Ready for more? Continue to Understanding UserOps to dive deeper into the fundamentals.</p>"},{"location":"userops/understanding/","title":"Understanding UserOperations","text":"<p>UserOperations (UserOps) are the fundamental building blocks of the ERC-4337 Account Abstraction ecosystem. This guide explains their structure, components, and how they work with EntryPoint v0.8.</p>"},{"location":"userops/understanding/#what-are-useroperations","title":"What are UserOperations?","text":"<p>A UserOperation is a structure that describes a transaction to be executed by an account contract. Unlike traditional Ethereum transactions, UserOps are:</p> <ul> <li>Abstraction Layer: They abstract away the complexity of transaction execution</li> <li>Batchable: Multiple operations can be bundled together</li> <li>Gasless: Can be sponsored by paymasters</li> <li>Customizable: Support custom validation logic</li> </ul>"},{"location":"userops/understanding/#userop-structure","title":"UserOp Structure","text":"<p>A UserOperation consists of the following fields:</p> <pre><code>interface UserOperation {\n  sender: string;           // Address of the account contract\n  nonce: bigint;           // Anti-replay nonce\n  initCode: string;        // Account initialization code\n  callData: string;        // Encoded function call data\n  callGasLimit: bigint;    // Gas limit for the call\n  verificationGasLimit: bigint; // Gas limit for validation\n  preVerificationGas: bigint;   // Gas for pre-verification\n  maxFeePerGas: bigint;    // Maximum gas price\n  maxPriorityFeePerGas: bigint; // Priority fee\n  paymasterAndData: string; // Paymaster contract and data\n  signature: string;        // User's signature\n}\n</code></pre>"},{"location":"userops/understanding/#field-breakdown","title":"Field Breakdown","text":""},{"location":"userops/understanding/#core-fields","title":"Core Fields","text":""},{"location":"userops/understanding/#sender","title":"<code>sender</code>","text":"<ul> <li>Purpose: The address of the account contract that will execute the operation</li> <li>Type: <code>string</code> (20-byte address)</li> <li>Example: <code>\"0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6\"</code></li> </ul>"},{"location":"userops/understanding/#nonce","title":"<code>nonce</code>","text":"<ul> <li>Purpose: Prevents replay attacks and ensures operation ordering</li> <li>Type: <code>bigint</code></li> <li>Behavior: Must be unique and sequential for each sender</li> <li>Example: <code>123n</code></li> </ul>"},{"location":"userops/understanding/#initcode","title":"<code>initCode</code>","text":"<ul> <li>Purpose: Code to deploy the account contract (if not already deployed)</li> <li>Type: <code>string</code> (hex-encoded bytes)</li> <li>Empty: <code>\"0x\"</code> if account already exists</li> <li>Example: <code>\"0x608060405234801561001057600080fd5b50...\"</code></li> </ul>"},{"location":"userops/understanding/#execution-fields","title":"Execution Fields","text":""},{"location":"userops/understanding/#calldata","title":"<code>callData</code>","text":"<ul> <li>Purpose: Encoded function call data for the target operation</li> <li>Type: <code>string</code> (hex-encoded bytes)</li> <li>Contains: Function selector + encoded parameters</li> <li>Example: <code>\"0xa9059cbb000000000000000000000000742d35cc...\"</code></li> </ul>"},{"location":"userops/understanding/#callgaslimit","title":"<code>callGasLimit</code>","text":"<ul> <li>Purpose: Maximum gas for executing the call</li> <li>Type: <code>bigint</code></li> <li>Estimation: Should cover the actual operation cost</li> <li>Example: <code>100000n</code></li> </ul>"},{"location":"userops/understanding/#verificationgaslimit","title":"<code>verificationGasLimit</code>","text":"<ul> <li>Purpose: Maximum gas for account validation</li> <li>Type: <code>bigint</code></li> <li>Usage: Covers signature verification and custom validation</li> <li>Example: <code>100000n</code></li> </ul>"},{"location":"userops/understanding/#preverificationgas","title":"<code>preVerificationGas</code>","text":"<ul> <li>Purpose: Gas for pre-verification steps</li> <li>Type: <code>bigint</code></li> <li>Fixed: Usually <code>21000</code> (base transaction cost)</li> <li>Example: <code>21000n</code></li> </ul>"},{"location":"userops/understanding/#gas-and-fees","title":"Gas and Fees","text":""},{"location":"userops/understanding/#maxfeepergas","title":"<code>maxFeePerGas</code>","text":"<ul> <li>Purpose: Maximum gas price willing to pay</li> <li>Type: <code>bigint</code> (in wei)</li> <li>EIP-1559: Part of the EIP-1559 fee structure</li> <li>Example: <code>20000000000n</code> (20 gwei)</li> </ul>"},{"location":"userops/understanding/#maxpriorityfeepergas","title":"<code>maxPriorityFeePerGas</code>","text":"<ul> <li>Purpose: Priority fee for miners/validators</li> <li>Type: <code>bigint</code> (in wei)</li> <li>EIP-1559: Part of the EIP-1559 fee structure</li> <li>Example: <code>2000000000n</code> (2 gwei)</li> </ul>"},{"location":"userops/understanding/#paymaster-integration","title":"Paymaster Integration","text":""},{"location":"userops/understanding/#paymasteranddata","title":"<code>paymasterAndData</code>","text":"<ul> <li>Purpose: Paymaster contract address and additional data</li> <li>Type: <code>string</code> (hex-encoded)</li> <li>Empty: <code>\"0x\"</code> if no paymaster</li> <li>Format: <code>paymasterAddress + paymasterData</code></li> <li>Example: <code>\"0x0000000000000000000000000000000000000000\"</code></li> </ul>"},{"location":"userops/understanding/#security","title":"Security","text":""},{"location":"userops/understanding/#signature","title":"<code>signature</code>","text":"<ul> <li>Purpose: Cryptographic signature proving authorization</li> <li>Type: <code>string</code> (hex-encoded bytes)</li> <li>Algorithm: ECDSA signature over UserOp hash</li> <li>Length: 65 bytes (r + s + v)</li> <li>Example: <code>\"0x1234567890abcdef...\"</code></li> </ul>"},{"location":"userops/understanding/#userop-lifecycle","title":"UserOp Lifecycle","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant C as Client\n    participant B as Bundler\n    participant E as EntryPoint\n    participant A as Account\n\n    U-&gt;&gt;C: Create UserOp\n    C-&gt;&gt;C: Encode callData\n    C-&gt;&gt;C: Calculate gas limits\n    C-&gt;&gt;C: Sign UserOp\n    C-&gt;&gt;B: Submit UserOp\n    B-&gt;&gt;E: Validate UserOp\n    E-&gt;&gt;A: Execute operation\n    A-&gt;&gt;E: Return result\n    E-&gt;&gt;B: Transaction hash\n    B-&gt;&gt;C: UserOp hash\n</code></pre>"},{"location":"userops/understanding/#validation-process","title":"Validation Process","text":"<p>EntryPoint v0.8 validates UserOps through several steps:</p>"},{"location":"userops/understanding/#1-pre-validation","title":"1. Pre-validation","text":"<ul> <li>Check nonce uniqueness</li> <li>Verify gas limits are reasonable</li> <li>Validate paymaster data (if present)</li> </ul>"},{"location":"userops/understanding/#2-account-validation","title":"2. Account Validation","text":"<ul> <li>Verify account exists or can be created</li> <li>Check signature validity</li> <li>Execute custom validation logic</li> </ul>"},{"location":"userops/understanding/#3-execution","title":"3. Execution","text":"<ul> <li>Execute the operation</li> <li>Handle paymaster sponsorship</li> <li>Emit events for tracking</li> </ul>"},{"location":"userops/understanding/#common-patterns","title":"Common Patterns","text":""},{"location":"userops/understanding/#simple-transfer","title":"Simple Transfer","text":"<pre><code>const userOp: UserOperation = {\n  sender: accountAddress,\n  nonce: currentNonce,\n  initCode: '0x',\n  callData: encodeTransfer(recipient, amount),\n  callGasLimit: 21000n,\n  verificationGasLimit: 100000n,\n  preVerificationGas: 21000n,\n  maxFeePerGas: parseUnits('20', 'gwei'),\n  maxPriorityFeePerGas: parseUnits('2', 'gwei'),\n  paymasterAndData: '0x',\n  signature: '0x'\n};\n</code></pre>"},{"location":"userops/understanding/#contract-interaction","title":"Contract Interaction","text":"<pre><code>const userOp: UserOperation = {\n  sender: accountAddress,\n  nonce: currentNonce,\n  initCode: '0x',\n  callData: encodeContractCall(contractAddress, functionName, params),\n  callGasLimit: 100000n,\n  verificationGasLimit: 150000n,\n  preVerificationGas: 21000n,\n  maxFeePerGas: parseUnits('25', 'gwei'),\n  maxPriorityFeePerGas: parseUnits('3', 'gwei'),\n  paymasterAndData: '0x',\n  signature: '0x'\n};\n</code></pre>"},{"location":"userops/understanding/#paymaster-sponsored","title":"Paymaster Sponsored","text":"<pre><code>const userOp: UserOperation = {\n  sender: accountAddress,\n  nonce: currentNonce,\n  initCode: '0x',\n  callData: encodeOperation(target, value, data),\n  callGasLimit: 50000n,\n  verificationGasLimit: 100000n,\n  preVerificationGas: 21000n,\n  maxFeePerGas: parseUnits('20', 'gwei'),\n  maxPriorityFeePerGas: parseUnits('2', 'gwei'),\n  paymasterAndData: encodePaymasterData(paymasterAddress, paymasterData),\n  signature: '0x'\n};\n</code></pre>"},{"location":"userops/understanding/#best-practices","title":"Best Practices","text":""},{"location":"userops/understanding/#gas-estimation","title":"Gas Estimation","text":"<ul> <li>Always estimate gas limits accurately</li> <li>Include buffer for gas price fluctuations</li> <li>Test on testnets before mainnet</li> </ul>"},{"location":"userops/understanding/#security_1","title":"Security","text":"<ul> <li>Validate all inputs before signing</li> <li>Use secure random nonces</li> <li>Implement proper signature verification</li> </ul>"},{"location":"userops/understanding/#error-handling","title":"Error Handling","text":"<ul> <li>Handle validation failures gracefully</li> <li>Implement retry logic for network issues</li> <li>Monitor UserOp status</li> </ul>"},{"location":"userops/understanding/#next-steps","title":"Next Steps","text":"<p>Now that you understand UserOp structure, explore:</p> <ol> <li>Constructing UserOps - Learn to build UserOps programmatically</li> <li>Submitting UserOps - Submit UserOps to bundlers</li> <li>Monitoring UserOps - Track UserOp execution</li> </ol> <p>Ready to build your first UserOp? Check out our Constructing UserOps guide.</p>"}]}